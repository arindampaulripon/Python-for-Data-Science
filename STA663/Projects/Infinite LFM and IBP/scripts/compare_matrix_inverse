from original_functions import IBP_prior, calcInverse
import numpy as np
import time
#check whether the inversion method described by Griffiths and Ghahramani(2005) works
X=np.load('data/data_initialized.npy')
N=X.shape[0]
D=X.shape[1]
sigmaX=1.
sigmaA=1.
alpha=1.
i=10
k=3
Z,K = IBP_prior(alpha,N)
M = np.linalg.inv(Z.T.dot(Z)+(sigmaX**2/sigmaA**2)*np.identity(K))
Z[i,k] = 1 - Z[i,k]
loops = 1000
tcalcInv=np.zeros(loops)
for l in range(loops):
    t0=time.time()
    calcInverse(Z,M,i,k)
    t1=time.time()
    tcalcInv[l]=t1-t0
mtcalcInv= round(np.mean(tcalcInv),7)
tlinalgInv=np.zeros(loops)
for l in range(loops):
    t0=time.time()
    np.linalg.inv(Z.T.dot(Z)+(sigmaX**2/sigmaA**2)*np.identity(K))
    t1=time.time()
    tlinalgInv[l]=t1-t0
mtlinalgInv= round(np.mean(tlinalgInv),7)

aaaa = calcInverse(Z,M,i,k)
bbbb = np.linalg.inv(Z.T.dot(Z)+(sigmaX**2/sigmaA**2)*np.identity(K))
import numpy.testing as npt
npt.assert_almost_equal(aaaa,bbbb, decimal =2)
